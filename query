#! /usr/bin/env python3

from argparse import ArgumentParser
from sys import argv
from importer import Storage
from query import Filter, Sorter, Selector, Bulk
from values import TimeVal


class CLI:
    '''
    Synopsis
    --------
    A plain CLI wrapper over the query.Bulk class.
    '''

    DESC = 'Select data from the specified datastore, by applying a set of operators.'
    DEFAULT = './stubs/projects'

    def __init__(self, args=argv[1:]):
        self.args = args
        self.opts = self._parser().parse_args(self.args)

    def __call__(self):
        storage = Storage(self.opts.datastore)
        table = storage.read()
        bulk = Bulk(self.filter, self.order, self.select)
        for row in bulk(table):
            self._print(row)

    @property
    def filter(self):
        if self.opts.filter:
            return Filter(self.opts.filter)

    @property
    def order(self):
        if self.opts.order:
            return Sorter(self.opts.order)

    @property
    def select(self):
        if self.opts.select:
            return Selector(self.opts.select, group=self.opts.group)

    def _print(self, row):
        tokens = []
        for value in row:
            if hasattr(value, 'strptime'):
                value = value.strftime(TimeVal.FORMAT)
            tokens.append(str(value))
        print(','.join(tokens))

    def _parser(self):
        parser = ArgumentParser(description=self.DESC)
        parser.add_argument('-d', '--datastore',
                            default=self.DEFAULT,
                            help='the datastore to select data from')
        parser.add_argument('-s', '--select',
                            type=str,
                            help='select just specified column names, separated by comma, optionally prefixed by colon and aggregate name')
        parser.add_argument('-g', '--group',
                            type=str,
                            help='group data by specified column name, combined by aggregates on select clause')
        parser.add_argument('-f', '--filter',
                            type=str,
                            help='filter column by specified value')
        parser.add_argument('-o', '--order',
                            type=str,
                            help='sort data by specified column names, separated by comma')
        return parser


if __name__ == '__main__':
    CLI()()
